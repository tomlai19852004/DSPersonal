MVP Architecture in Android DevelopmentIntroduction ~ Activity was God ~What is MVP?The Dependency Rule?MVC, MVP or MVVM?Pros and ConsShow me the code!!!ConclusionLinks and ResourcesRecently, the more and more Android developer seem to discuss about the architecture. So do my colleagues and engineers around me. Though I did not know much about MVP and DDD, our new project was decided to built on MVP architecture.This post is what I have researched and learnt from various posts and discussions, including:And, here is what this post does not include:In the end, I will tell you further readings for those topics.By the way, I gave it a talk at a local workshop about the MVP architecture last week. This post is meant to correspondence with the talk as well.First of all, let us talk about the root problem why the Android Development has raised the necessity for the clean architecture.Here is an excerpt from “Code Complete 2nd Edition”:The God Class is hard to maintain, understand what is going on, execute unit testing, expand in enhancement phases, etc. This is the golden rule to avoid creating god classes.However, in Android development, the Activity classes tend to be bigger and bigger, if you do not care too much about the architecture. This is because, in Android, the View and other threads can coexist in Activity classes. The biggest problem? The business logic and UI logic coexist in the Activity classes. This leads to the difficulty of unit testing or maintainability.This is one of the reasons why the clean architecture was needed. Not only the enlargement of Activity classes, there are other problems like complicated lifecycle among Activity and Fragment classes, the data binding, and so on.MVP stands for Model, View, and Presenter.The below image shows one of schemas based on MVP architecture. View is UI Threads. Presenter is the adapter between View and Model. UseCase, or domain layer, is in the Model layer, which gets or puts all data into entities. The dependency rules applies here ( this is described in the next chapter ).The key point is that, the higher interfaces do not know about the lower ones, or more precisely, the higher interfaces cannot, should not, and must not know the details about the lower ones. Yes, Information hiding.Uncle Bob’s “The Clean Architecture” describes really well about what the dependency rule is.Here are the excerpts from the above post:Then which one is the best? Which one is superior to others? Should I choose the only one from the others?The answer is, No.The motivation of these patterns are the same. How to avoid complicated spaghetti codes, let it easy to execute unit testing, and create the higher-quality app. That’s it.Of course, there would be much more patterns beside those three ones. Each one of them is not silver bullet nor the only answer. They are one of methodology. One of solution to the problems. Do not turns means to purposes.Okay, let us go back to the MVP architecture. For a while, we have seen what the MVP is, why the discussion over MVP or other architecture is hot now, and what are the differences among MVC, MVP and MVVM. Here we summarize the pros and cons of the MPV architecture.Here is showing only the minimal structure of MVP patterns. If you would like to see much more examples or lively examples, please refer the “Links and Resources” chapter at the end. There are much more plentiful and well-designed examples, basically hosted in Github so that you can clone and see how it works on your devices.First of all, let define the interfaces of each views.Let us override the TopView class. The key point here is:Here is the Presenter class. The most important thing is that, the presenter only adapter between model and view. For example, what the `TopUseCase#saveCalendarDate()` does is hidden to TopPresenter, so does TopView. You do not have to care about what the data structure is and how the business logic works. Therefore you can execute unit testing of TopUseCase, because the business logic is separated from View layers.Yes, you can of course execute unit testings even though the business logic is implemented in Activity class… but this requires much more time and complexity. It may take much more time to run the app. Rather, you should make full use of the power of unit testing library like Robolectric.There is no silver bullet, and, MVP itself is just one of solutions. It can be mixed with other methodology, and at the same time, it can be selectively used for each projects.This is a post by Uncle Bob, describing what the dependency rule is, and how the each components work among them. The graph from my talks at the beginning was inspired by his post. Though this is not written focusing on Android Development, as always, his words implies a lot and well-organized. Must-read one.I think this is the most famous and popular blog post explaining how to incorporate the MVP architecture into Android Development. I also came across the word ‘MVP’ from his easily-readable and well-written blog post. His sample code on Github should be cloned by every Android developers who want to know how the MVP architecture works in the real app.A simple guid for MVC, MVP and MVVM on Android projects. I learnt a lot from his plain but widely-covered post, especially the differences among MVC, MVP and MVVM.This is a talk from Senior Android Developer at Karumi, which is explaining from some design patterns ( e.g. Renderer Pattern, Repository Pattern and Command Pattern ) to MVP architecture. If you want to broaden your research over MVC or MVP, this is the one you are looking for.If you are misunderstanding JSON or SQL with the Model layer, or do not get the precise image about what the Model layer is, this post leads you to the further understanding about what and why the Model layer is separated from others. The “Model layer is solution” section is especially great for showing the real example how you implement your code from interfaces to testing.—KJ is a Software Programmer Based in Tokyo. Programming, Teaching, and Singing with his Acoustic Guitar is his passion. Currently Android Developer@Recruit_PR, Former @LifeisTechInc — Link: About Me, Twitter, GitHub