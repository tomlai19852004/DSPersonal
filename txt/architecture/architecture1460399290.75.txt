Multi- Tenant ArchitectureThe application I was developing, a milk management system initially started out for DFO (Dairy Farmers of Ontario). Midway through the term, we learned that some of the requirements had changed as the team the team successfully got the projects for the other Canadian provinces requiring the same software with slight modifications of their own.Instead of putting a bunch of if’s statements for each client or worse, copy-pasting the same code for each province, we adopted a multi-tenant architecture.The degree of isolation can vary vastly. Either a separate database approach can be inherited, where data generated by each client is stored in a different database or, a separate schema where they have different tables for each client in the same database or a shared schema where all the data is stored in one table and can be differentiated with a column containing their client ids.While deciding the ideal approach for this problem, we took into consideration of the number of tenants, database size per tenant, the number of users per tenant and per-tenant value-added service. The number of tenants using the application was a constant and large data was being generated from each client. Since each Canadian province generated a large amount of data, had different business requirements requiring different table structures for some modules, and, constant number of tenants, we adopted the “Separate Databases” approach where we separate the data for each client.Add conclusion here