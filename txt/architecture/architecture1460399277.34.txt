Compile time plugin architecture in GoLet’s say you want to build different distributions of your application and include selected features in some but exclude them from other and still keep a single code base.I’m going to describe a simple, compile time plugin architecture implementation in Go that solves the problem.The architecture consists of the following elements:This is a global array of plugin initializers and a code that calls them:main.goThe initializer resides in a separate .go file and is a func(), added to the initializers registry in init():init_plugin.goThis makes the following flow:Go build tool lets you specify the files to be included in the build. The simplest use of this is to pass a single file, e.g.:However it’s possible to give multiple files, as long as they all exist in the same directory.The plugin initializer is defined in init_plugin.go so it is possible to decide if the plugin should be included in the executable or not, at the compile time. To include the file, just add it to the go build call:This will produce a build with the plugin initializer included. You can implement other plugin initializers in other .go files, as long as they exist in the directory of the main.go.The simple architecture can be further extended, e.g. by introducing the application interface and changing the plugin initializer declaration to accept the application interface.main.goThe example application takes and processes data from multiple sources. There are a few editions of the application and each can read data from different set of sources, e.g. standard input, HTTP, Message Queue etc.The application interface is extended with a function returning a data input channel:main.goThe data sources may be implemented as separate plugins, making the following files:stdin_init.go for standard inputhttp_init.go for HTTP and mq_init.go for Message Queue.To build an edition supporting Message Queue and HTTP, just pass the relevant files to the build tool:There are other possible variations of the architecture:Thanks for reading.