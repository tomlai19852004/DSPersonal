Messaging System Architecture in Node.js — Part 1Building a realtime app like messaging system is not hard to do in Node.js as its good for building realtime networking apps. But the hardest part is how are we gonna structure the system, the messaging system.This time I’m gonna tell you how do I build something like this in my way. First we need to structure the system, this is my architecture.Every rounded square is a service that we are going to develop. Every service has its own responsibility. Let’s define their responsibility.Actually this is not a service, this is just a client for the messaging service but, its better to know its responsibility.So its all, for now.This service serves what User UI does, receive a new message from User UI. Then put it on a Message Queue, we’re gonna decide which MQ to use later. Now lets just define the responsibilities.Inbound Messages enqueue messages to a MQ, then something has to dequeue these messages and separate them based on their conversationId. Its what Conversation Router is going to do anyway. Comes to responsibility.Message persistor is a service that saves incoming messages to NoSQL database and off course reads a message body by messageId from NoSQL.Something has to help User UI to update its data frequently in near realtime by using SSE. It’s what Outbound Message does.This service translates a specific user conversation group to an unique conversationId.Okay we’re done defining each service’s responsibilities. Then its time for Node.js stuffs..But wait, its gonna be on the next part, we are going to decide which solution that fits our needs in this system including MQ and NoSQL.See you on the next part.